!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(OBJS_DIR)/%.o	Makefile	/^$(OBJS_DIR)\/%.o	:	%.c philo.h$/;"	t
$(PHILO)	Makefile	/^$(PHILO)		:	$(OBJS)$/;"	t
ALIVE	include/philo.h	/^	ALIVE,$/;"	e	enum:e_doa
CC	Makefile	/^CC				=	gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS			=	-Wall -Wextra -Werror$/;"	m
DEAD	include/philo.h	/^	DEAD,$/;"	e	enum:e_doa
DIE	include/philo.h	/^	DIE,$/;"	e	enum:e_status
EAT	include/philo.h	/^	EAT,$/;"	e	enum:e_status
EMPTY	include/philo.h	/^	EMPTY,$/;"	e	enum:e_handling
EVEN	include/philo.h	/^	EVEN,$/;"	e	enum:e_group
FAILURE	include/philo.h	/^	FAILURE = 0,$/;"	e	enum:e_result
FULL	include/philo.h	/^	FULL,$/;"	e	enum:e_stomach
GYM	include/philo.h	/^	GYM,$/;"	e	enum:e_status
HOLD	include/philo.h	/^	HOLD,$/;"	e	enum:e_handling
HUNGRY	include/philo.h	/^	HUNGRY,$/;"	e	enum:e_stomach
INCLUDE	Makefile	/^INCLUDE			=	-I.\/include$/;"	m
LIB	Makefile	/^LIB				=	-lpthread$/;"	m
NONE	include/philo.h	/^# define NONE /;"	d
OBJS	Makefile	/^OBJS			=	$(addprefix $(OBJS_DIR)\/, $(SRCS:.c=.o))$/;"	m
OBJS_DIR	Makefile	/^OBJS_DIR		=	.\/objs$/;"	m
ODD	include/philo.h	/^	ODD,$/;"	e	enum:e_group
OFF	include/philo.h	/^	OFF = 0,$/;"	e	enum:e_button
ON	include/philo.h	/^	ON = 1,$/;"	e	enum:e_button
PHILO	Makefile	/^PHILO			=	philo$/;"	m
PHILO_H	include/philo.h	/^# define PHILO_H$/;"	d
RM	Makefile	/^RM				=	rm -f$/;"	m
SLEEP	include/philo.h	/^	SLEEP,$/;"	e	enum:e_status
SRCS	Makefile	/^SRCS			=	main.c\\$/;"	m
STDERR	include/philo.h	/^	STDERR = 2,$/;"	e	enum:e_io
STDIN	include/philo.h	/^	STDIN = 0,$/;"	e	enum:e_io
STDOUT	include/philo.h	/^	STDOUT = 1,$/;"	e	enum:e_io
SUCCESS	include/philo.h	/^	SUCCESS = 1,$/;"	e	enum:e_result
TAKEN_LEFT	include/philo.h	/^	TAKEN_LEFT,$/;"	e	enum:e_status
TAKEN_RIGHT	include/philo.h	/^	TAKEN_RIGHT,$/;"	e	enum:e_status
THINK	include/philo.h	/^	THINK,$/;"	e	enum:e_status
act_sleep	srcs/act_sleep.c	/^void	act_sleep(int act_time)$/;"	f	typeref:typename:void
add_eat_count	srcs/add_eat_count.c	/^void	add_eat_count(t_philo *philo)$/;"	f	typeref:typename:void
all	Makefile	/^all				:	$(PHILO)$/;"	t
all_status_die	srcs/dead_or_alive.c	/^static void	all_status_die(t_monitor *monitor, int num)$/;"	f	typeref:typename:void	file:
all_status_gym	srcs/stomach_check.c	/^static void	all_status_gym(t_monitor *monitor, int num)$/;"	f	typeref:typename:void	file:
alloc_part	srcs/mutex_init.c	/^static int	alloc_part(t_mtx **mutex, int num)$/;"	f	typeref:typename:int	file:
alloc_part	srcs/philos_init.c	/^static int	alloc_part(t_philo **philos, int num)$/;"	f	typeref:typename:int	file:
args	include/philo.h	/^	t_arg		*args;$/;"	m	struct:s_philo	typeref:typename:t_arg *
argv_atoi	srcs/argv_atoi.c	/^int	argv_atoi(t_arg *args, int argc, char *argv[])$/;"	f	typeref:typename:int
clean	Makefile	/^clean			:$/;"	t
dead	include/philo.h	/^	t_time		dead;$/;"	m	struct:s_philo	typeref:typename:t_time
dead_or_alive	srcs/dead_or_alive.c	/^int		dead_or_alive(t_monitor *monitor, int num)$/;"	f	typeref:typename:int
dead_time_cmp	srcs/dead_or_alive.c	/^static int		dead_time_cmp(t_time *l_dead)$/;"	f	typeref:typename:int	file:
do_eat	srcs/philo_action.c	/^void	do_eat(t_philo *philo, int *l_status)$/;"	f	typeref:typename:void
do_pthread_create	srcs/do_pthread_create.c	/^int	do_pthread_create(t_philo *philos, t_monitor *monitor)$/;"	f	typeref:typename:int
do_pthread_join	srcs/do_pthread_join.c	/^int	do_pthread_join(t_philo *philos, t_monitor *monitor)$/;"	f	typeref:typename:int
do_set	srcs/philos_init.c	/^static void	do_set(t_philo **philos, t_arg *args, t_mtx *forks, t_mtx *locks)$/;"	f	typeref:typename:void	file:
do_sleep	srcs/philo_action.c	/^void	do_sleep(t_philo *philo, t_hand *hand, int *l_status)$/;"	f	typeref:typename:void
drop_fork	srcs/drop_fork.c	/^void	drop_fork(t_philo *philo, int left_fork, int right_fork)$/;"	f	typeref:typename:void
e_button	include/philo.h	/^typedef enum e_button$/;"	g
e_doa	include/philo.h	/^typedef enum e_doa$/;"	g
e_group	include/philo.h	/^typedef enum e_group$/;"	g
e_handling	include/philo.h	/^typedef enum e_handling$/;"	g
e_io	include/philo.h	/^typedef enum e_io$/;"	g
e_result	include/philo.h	/^typedef enum e_result$/;"	g
e_status	include/philo.h	/^typedef enum e_status$/;"	g
e_stomach	include/philo.h	/^typedef enum e_stomach$/;"	g
eat_count	include/philo.h	/^	int			eat_count;$/;"	m	struct:s_philo	typeref:typename:int
fclean	Makefile	/^fclean			:$/;"	t
first_dead_time_set	srcs/monitoring.c	/^static void	first_dead_time_set(t_monitor *monitor, int num)$/;"	f	typeref:typename:void	file:
forks	include/philo.h	/^	t_mtx		*forks;$/;"	m	struct:s_philo	typeref:typename:t_mtx *
ft_int_check	srcs/ft_int_check.c	/^int	ft_int_check(unsigned int input, unsigned int add, int minus)$/;"	f	typeref:typename:int
ft_isdigit	srcs/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isspace	srcs/ft_isspace.c	/^int	ft_isspace(int c)$/;"	f	typeref:typename:int
ft_putendl_fd	srcs/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_strlen	srcs/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
get_dead_time	srcs/dead_or_alive.c	/^static void	get_dead_time(t_philo *philo, t_time *l_dead)$/;"	f	typeref:typename:void	file:
get_eat_count	srcs/stomach_check.c	/^static void	get_eat_count(t_philo *philo, int *l_eat_count)$/;"	f	typeref:typename:void	file:
get_fork	srcs/get_fork.c	/^void	get_fork(t_philo *philo, int fork_id)$/;"	f	typeref:typename:void
get_num	srcs/philo_atoi.c	/^static unsigned int	get_num(const char *str, int minus, int *i)$/;"	f	typeref:typename:unsigned int	file:
get_status	srcs/get_status.c	/^void	get_status(t_philo *philo, int *status)$/;"	f	typeref:typename:void
get_time	srcs/get_time.c	/^long	get_time(void)$/;"	f	typeref:typename:long
group	include/philo.h	/^	int			group;$/;"	m	struct:s_philo	typeref:typename:int
hand_init	srcs/philosopher.c	/^static void	hand_init(t_hand *hand, int id, t_philo *philo)$/;"	f	typeref:typename:void	file:
id	include/philo.h	/^	int			id;$/;"	m	struct:s_philo	typeref:typename:int
init_part	srcs/mutex_init.c	/^static int	init_part(t_mtx **mutex, int num)$/;"	f	typeref:typename:int	file:
left	include/philo.h	/^	int			left;$/;"	m	struct:s_hand	typeref:typename:int
left_status	include/philo.h	/^	int			left_status;$/;"	m	struct:s_hand	typeref:typename:int
lock	include/philo.h	/^	t_mtx		*lock;$/;"	m	struct:s_philo	typeref:typename:t_mtx *
main	srcs/main.c	/^int	main(int argc, char *argv[])$/;"	f	typeref:typename:int
minus_check	srcs/philo_atoi.c	/^static void	minus_check(char c, int *minus, int *i)$/;"	f	typeref:typename:void	file:
monitor	include/philo.h	/^	pthread_t	monitor;$/;"	m	struct:s_monitor	typeref:typename:pthread_t
monitor_init	srcs/monitor_init.c	/^void	monitor_init(t_monitor *monitor, t_philo *philos)$/;"	f	typeref:typename:void
monitoring	srcs/monitoring.c	/^void	*monitoring(void *arg)$/;"	f	typeref:typename:void *
msec	include/philo.h	/^	long		msec;$/;"	m	struct:s_time	typeref:typename:long
mutex_destroy	srcs/mutex_destroy.c	/^int	mutex_destroy(t_mtx **mutex, int num)$/;"	f	typeref:typename:int
mutex_init	srcs/mutex_init.c	/^int	mutex_init(t_mtx **mutex, int num)$/;"	f	typeref:typename:int
now_eating	srcs/now_eating.c	/^void	now_eating(int time_to_eat)$/;"	f	typeref:typename:void
now_sleeping	srcs/now_sleeping.c	/^void	now_sleeping(int time_to_sleep)$/;"	f	typeref:typename:void
num_of_philos	include/philo.h	/^	int			num_of_philos;$/;"	m	struct:s_arg	typeref:typename:int
num_of_times_must_eat	include/philo.h	/^	int			num_of_times_must_eat;$/;"	m	struct:s_arg	typeref:typename:int
philo	include/philo.h	/^	pthread_t	philo;$/;"	m	struct:s_philo	typeref:typename:pthread_t
philo_atoi	srcs/philo_atoi.c	/^int	philo_atoi(const char *str)$/;"	f	typeref:typename:int
philo_loop	srcs/philosopher.c	/^static void	philo_loop(t_philo *philo, t_hand *hand, int id)$/;"	f	typeref:typename:void	file:
philos	include/philo.h	/^	t_philo		*philos;$/;"	m	struct:s_monitor	typeref:typename:t_philo *
philos_init	srcs/philos_init.c	/^int	philos_init(t_philo **philos, t_arg *args, t_mtx *forks, t_mtx *locks)$/;"	f	typeref:typename:int
philosopher	srcs/philosopher.c	/^void	*philosopher(void *arg)$/;"	f	typeref:typename:void *
put_fork	srcs/put_fork.c	/^void	put_fork(t_philo *philo, t_hand *hand)$/;"	f	typeref:typename:void
put_timestamp	srcs/put_timestamp.c	/^void	put_timestamp(int id, int status)$/;"	f	typeref:typename:void
re	Makefile	/^re				:	fclean all$/;"	t
return_failure	srcs/argv_atoi.c	/^static	int	return_failure(char *msg)$/;"	f	typeref:typename:int	file:
right	include/philo.h	/^	int			right;$/;"	m	struct:s_hand	typeref:typename:int
right_status	include/philo.h	/^	int			right_status;$/;"	m	struct:s_hand	typeref:typename:int
s_arg	include/philo.h	/^typedef struct s_arg$/;"	s
s_hand	include/philo.h	/^typedef struct s_hand$/;"	s
s_monitor	include/philo.h	/^typedef struct s_monitor$/;"	s
s_philo	include/philo.h	/^typedef struct s_philo$/;"	s
s_time	include/philo.h	/^typedef struct s_time$/;"	s
sec	include/philo.h	/^	long		sec;$/;"	m	struct:s_time	typeref:typename:long
set_dead_time	srcs/set_dead_time.c	/^void	set_dead_time(t_philo *philo)$/;"	f	typeref:typename:void
set_msg	srcs/put_timestamp.c	/^static void	set_msg(int status, char **msg)$/;"	f	typeref:typename:void	file:
set_status	srcs/set_status.c	/^void	set_status(t_philo *philo, int status)$/;"	f	typeref:typename:void
set_status_and_put_timestamp	srcs/philosopher.c	/^static void	set_status_and_put_timestamp(t_philo *philo, int status, int id)$/;"	f	typeref:typename:void	file:
status	include/philo.h	/^	int			status;$/;"	m	struct:s_philo	typeref:typename:int
stomack_check	srcs/stomach_check.c	/^int	stomack_check(t_monitor *monitor, int num)$/;"	f	typeref:typename:int
t_arg	include/philo.h	/^}				t_arg;$/;"	t	typeref:struct:s_arg
t_button	include/philo.h	/^}			t_button;$/;"	t	typeref:enum:e_button
t_doa	include/philo.h	/^}			t_doa;$/;"	t	typeref:enum:e_doa
t_group	include/philo.h	/^}			t_group;$/;"	t	typeref:enum:e_group
t_hand	include/philo.h	/^}				t_hand;$/;"	t	typeref:struct:s_hand
t_handling	include/philo.h	/^}			t_handling;$/;"	t	typeref:enum:e_handling
t_io	include/philo.h	/^}			t_io;$/;"	t	typeref:enum:e_io
t_monitor	include/philo.h	/^}				t_monitor;$/;"	t	typeref:struct:s_monitor
t_mtx	include/philo.h	/^typedef pthread_mutex_t t_mtx;$/;"	t	typeref:typename:pthread_mutex_t
t_philo	include/philo.h	/^}				t_philo;$/;"	t	typeref:struct:s_philo
t_resurl	include/philo.h	/^}			t_resurl;$/;"	t	typeref:enum:e_result
t_status	include/philo.h	/^}			t_status;$/;"	t	typeref:enum:e_status
t_stomach	include/philo.h	/^}			t_stomach;$/;"	t	typeref:enum:e_stomach
t_time	include/philo.h	/^}				t_time;$/;"	t	typeref:struct:s_time
take_left_fork	srcs/philo_action.c	/^void	take_left_fork(t_philo *philo, t_hand *hand, int *l_status)$/;"	f	typeref:typename:void
take_right_fork	srcs/philo_action.c	/^void	take_right_fork(t_philo *philo, t_hand *hand, int *l_status)$/;"	f	typeref:typename:void
time_to_die	include/philo.h	/^	int			time_to_die;$/;"	m	struct:s_arg	typeref:typename:int
time_to_eat	include/philo.h	/^	int			time_to_eat;$/;"	m	struct:s_arg	typeref:typename:int
time_to_sleep	include/philo.h	/^	int			time_to_sleep;$/;"	m	struct:s_arg	typeref:typename:int
